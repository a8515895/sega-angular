{"remainingRequest":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\sega-angular\\node_modules\\ng-socket-io\\dist\\src\\socket-io.service.js","dependencies":[{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\ng-socket-io\\dist\\src\\socket-io.service.js","mtime":1545619932782},{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545619921548},{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1545619913519}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nrequire(\"rxjs/add/operator/share\");\nvar io = require(\"socket.io-client\");\nvar socket_io_module_1 = require(\"./socket-io.module\");\nvar WrappedSocket = /*@__PURE__*/ (function () {\n    function WrappedSocket(config) {\n        this.subscribersCounter = 0;\n        var url = config.url || '';\n        var options = config.options || {};\n        this.ioSocket = io(url, options);\n    }\n    WrappedSocket.prototype.on = function (eventName, callback) {\n        this.ioSocket.on(eventName, callback);\n    };\n    WrappedSocket.prototype.once = function (eventName, callback) {\n        this.ioSocket.once(eventName, callback);\n    };\n    WrappedSocket.prototype.connect = function () {\n        return this.ioSocket.connect();\n    };\n    WrappedSocket.prototype.disconnect = function (close) {\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\n    };\n    WrappedSocket.prototype.emit = function (eventName, data, callback) {\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\n    };\n    WrappedSocket.prototype.removeListener = function (eventName, callback) {\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\n    };\n    WrappedSocket.prototype.removeAllListeners = function (eventName) {\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\n    };\n    /** create an Observable from an event */\n    WrappedSocket.prototype.fromEvent = function (eventName) {\n        var _this = this;\n        this.subscribersCounter++;\n        return Observable_1.Observable.create(function (observer) {\n            _this.ioSocket.on(eventName, function (data) {\n                observer.next(data);\n            });\n            return function () {\n                if (_this.subscribersCounter === 1)\n                    _this.ioSocket.removeListener(eventName);\n            };\n        }).share();\n    };\n    /* Creates a Promise for a one-time event */\n    WrappedSocket.prototype.fromEventOnce = function (eventName) {\n        var _this = this;\n        return new Promise(function (resolve) { return _this.once(eventName, resolve); });\n    };\n    return WrappedSocket;\n}());\nexports.WrappedSocket = WrappedSocket;\n",null]}