{"remainingRequest":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\sega-angular\\node_modules\\angular-highcharts\\angular-highcharts.es5.js","dependencies":[{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\angular-highcharts\\angular-highcharts.es5.js","mtime":1545619920067},{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545619921548},{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1545619913519}],"contextDependencies":[],"result":["import * as Highcharts from 'highcharts';\nimport { chart, stockChart, mapChart } from 'highcharts';\nexport { Highcharts };\nimport { Directive, ElementRef, Input, Inject, Injectable, InjectionToken, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Chart = /*@__PURE__*/ (function () {\n    function Chart(options) {\n        if (options === void 0) {\n            options = { series: [] };\n        }\n        // init series array if not set\n        if (!options.series) {\n            options.series = [];\n        }\n        this.options = options;\n    }\n    Object.defineProperty(Chart.prototype, \"options\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.ref) {\n                return this.ref.options;\n            }\n            return this._options;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._options = value;\n            if (this.ref) {\n                this.ref.update(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Add Point\n     * \\@memberof Chart\n     * @param {?} point         Highcharts.DataPoint, number touple or number\n     * @param {?=} serieIndex    Index position of series. This defaults to 0.\n     * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.\n     * @param {?=} shift         Shift point to the start of series. This defaults to false.\n     * @return {?}\n     */\n    Chart.prototype.addPoint = /**\n     * Add Point\n     * \\@memberof Chart\n     * @param {?} point         Highcharts.DataPoint, number touple or number\n     * @param {?=} serieIndex    Index position of series. This defaults to 0.\n     * @param {?=} redraw        Flag whether or not to redraw point. This defaults to true.\n     * @param {?=} shift         Shift point to the start of series. This defaults to false.\n     * @return {?}\n     */\n        function (point, serieIndex, redraw, shift) {\n            if (serieIndex === void 0) {\n                serieIndex = 0;\n            }\n            if (redraw === void 0) {\n                redraw = true;\n            }\n            if (shift === void 0) {\n                shift = false;\n            }\n            if (this.ref && this.ref.series.length > serieIndex) {\n                this.ref.series[serieIndex].addPoint(point, redraw, shift);\n                return;\n            }\n            // keep options in snyc if chart is not initialized\n            if (this.options.series.length > serieIndex) {\n                this.options.series[serieIndex].data.push(point);\n            }\n        };\n    /**\n     * Add Series\n     * \\@memberof Chart\n     * @param {?} serie         Series Configuration\n     * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.\n     * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n     * @return {?}\n     */\n    Chart.prototype.addSerie = /**\n     * Add Series\n     * \\@memberof Chart\n     * @param {?} serie         Series Configuration\n     * @param {?=} redraw        Flag whether or not to redraw series. This defaults to true.\n     * @param {?=} animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n     * @return {?}\n     */\n        function (serie, redraw, animation) {\n            if (redraw === void 0) {\n                redraw = true;\n            }\n            if (animation === void 0) {\n                animation = false;\n            }\n            if (this.ref) {\n                this.ref.addSeries(serie, redraw, animation);\n                return;\n            }\n            // keep options in snyc if chart is not initialized\n            this.options.series.push(serie);\n        };\n    /**\n     * Remove Point\n     * \\@memberof Chart\n     * @param {?} pointIndex    Index of Point\n     * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.\n     * @return {?}\n     */\n    Chart.prototype.removePoint = /**\n     * Remove Point\n     * \\@memberof Chart\n     * @param {?} pointIndex    Index of Point\n     * @param {?=} serieIndex    Specified Index of Series. Defaults to 0.\n     * @return {?}\n     */\n        function (pointIndex, serieIndex) {\n            if (serieIndex === void 0) {\n                serieIndex = 0;\n            }\n            if (this.ref &&\n                this.ref.series.length > serieIndex &&\n                this.ref.series[serieIndex].data.length > pointIndex) {\n                this.ref.series[serieIndex].removePoint(pointIndex, true);\n                return;\n            }\n            // keep options in snyc if chart is not initialized\n            if (this.options.series.length > serieIndex &&\n                this.options.series[serieIndex].data.length > pointIndex) {\n                this.options.series[serieIndex].data.splice(pointIndex, 1);\n            }\n        };\n    /**\n     * Remove Series\n     * \\@memberof Chart\n     * @param {?} serieIndex    Index position of series to remove.\n     * @return {?}\n     */\n    Chart.prototype.removeSerie = /**\n     * Remove Series\n     * \\@memberof Chart\n     * @param {?} serieIndex    Index position of series to remove.\n     * @return {?}\n     */\n        function (serieIndex) {\n            if (this.ref && this.ref.series.length > serieIndex) {\n                this.ref.series[serieIndex].remove(true);\n                return;\n            }\n            // keep options in snyc if chart is not initialized\n            if (this.options.series.length > serieIndex) {\n                this.options.series.splice(serieIndex, 1);\n            }\n        };\n    return Chart;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\nvar /**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */ MapChart = /*@__PURE__*/ (function () {\n    function MapChart(options) {\n        this.options = options;\n    }\n    return MapChart;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */\nvar /**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */ StockChart = /*@__PURE__*/ (function () {\n    function StockChart(options) {\n        if (options === void 0) {\n            options = { series: [] };\n        }\n        this.options = options;\n    }\n    return StockChart;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ChartDirective = /*@__PURE__*/ (function () {\n    function ChartDirective(el) {\n        this.el = el;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ChartDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (!changes[\"chart\"].isFirstChange()) {\n                this.destroy();\n                this.init();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    ChartDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.init();\n        };\n    /**\n     * @return {?}\n     */\n    ChartDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destroy(true);\n        };\n    /**\n     * @return {?}\n     */\n    ChartDirective.prototype.init = /**\n     * @return {?}\n     */\n        function () {\n            if (this.chart instanceof Chart) {\n                return this.chart.ref = chart(this.el.nativeElement, this.chart.options);\n            }\n            if (this.chart instanceof StockChart) {\n                return this.chart.ref = stockChart(this.el.nativeElement, this.chart.options);\n            }\n            if (this.chart instanceof MapChart) {\n                return this.chart.ref = mapChart(this.el.nativeElement, this.chart.options);\n            }\n        };\n    /**\n     * @param {?=} sync\n     * @return {?}\n     */\n    ChartDirective.prototype.destroy = /**\n     * @param {?=} sync\n     * @return {?}\n     */\n        function (sync) {\n            if (sync === void 0) {\n                sync = false;\n            }\n            if (this.chart && this.chart.ref) {\n                if (sync) {\n                    this.chart.options = this.chart.ref.options;\n                }\n                this.chart.ref.destroy();\n                delete this.chart.ref;\n            }\n        };\n    return ChartDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ HIGHCHARTS_MODULES = new InjectionToken('HighchartsModules');\nvar ChartService = /*@__PURE__*/ (function () {\n    function ChartService(chartModules) {\n        this.chartModules = chartModules;\n    }\n    /**\n     * @return {?}\n     */\n    ChartService.prototype.initModules = /**\n     * @return {?}\n     */\n        function () {\n            this.chartModules.forEach(function (chartModule) {\n                chartModule(Highcharts);\n            });\n        };\n    return ChartService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ɵ0 = [];\nvar ChartModule = /*@__PURE__*/ (function () {\n    function ChartModule(cs) {\n        this.cs = cs;\n        this.cs.initModules();\n    }\n    return ChartModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { ChartModule, HIGHCHARTS_MODULES, Chart, StockChart, MapChart, ChartDirective as ɵb, ChartService as ɵa };\n",null]}