{"remainingRequest":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\sega-angular\\node_modules\\angular-confirmation-popover\\esm5\\angular-confirmation-popover.js","dependencies":[{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\angular-confirmation-popover\\esm5\\angular-confirmation-popover.js","mtime":1545619920016},{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545619921548},{"path":"C:\\xampp\\htdocs\\sega-angular\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1545619913519}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { Injectable, Component, Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver, Renderer2, NgModule, InjectionToken } from '@angular/core';\nimport { Positioning } from 'positioning';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\nvar ConfirmationPopoverOptions = /*@__PURE__*/ (function () {\n    function ConfirmationPopoverOptions() {\n        this.confirmText = 'Confirm';\n        this.cancelText = 'Cancel';\n        this.confirmButtonType = 'success';\n        this.cancelButtonType = 'default';\n        this.placement = 'top';\n        this.hideConfirmButton = false;\n        this.hideCancelButton = false;\n        this.popoverClass = '';\n        this.appendToBody = false;\n        this.reverseButtonOrder = false;\n    }\n    return ConfirmationPopoverOptions;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowOptions = (function (_super) {\n    tslib_1.__extends(ConfirmationPopoverWindowOptions, _super);\n    function ConfirmationPopoverWindowOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ConfirmationPopoverWindowOptions;\n}(ConfirmationPopoverOptions));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} options\n     */\n    function ConfirmationPopoverWindowComponent(options) {\n        this.options = options;\n    }\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = function () {\n        this.options.onAfterViewInit();\n    };\n    return ConfirmationPopoverWindowComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n * @record\n */\n/**\n * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n * ```html\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirmationPopover\n *  [popoverTitle]=\"popoverTitle\"\n *  [popoverMessage]=\"popoverMessage\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\nvar ConfirmationPopoverDirective = /*@__PURE__*/ (function () {\n    /**\n     * \\@internal\n     * @param {?} viewContainerRef\n     * @param {?} elm\n     * @param {?} defaultOptions\n     * @param {?} cfr\n     * @param {?} position\n     * @param {?} renderer\n     */\n    function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, position, renderer) {\n        this.viewContainerRef = viewContainerRef;\n        this.elm = elm;\n        this.defaultOptions = defaultOptions;\n        this.cfr = cfr;\n        this.position = position;\n        this.renderer = renderer;\n        /**\n         * Whether to disable showing the popover. Default `false`.\n         */\n        this.isDisabled = false;\n        /**\n         * Will open or show the popover when changed.\n         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n         */\n        this.isOpen = false;\n        /**\n         * Will emit when the popover is opened or closed\n         */\n        this.isOpenChange = new EventEmitter(true);\n        /**\n         * An expression that is called when the confirm button is clicked.\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * An expression that is called when the cancel button is clicked.\n         */\n        this.cancel = new EventEmitter();\n        this.eventListeners = [];\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnInit = function () {\n        this.isOpenChange.emit(false);\n    };\n    /**\n     * \\@internal\n     * @param {?} changes\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"isOpen\"]) {\n            if (changes[\"isOpen\"].currentValue === true) {\n                this.showPopover();\n            }\n            else {\n                this.hidePopover();\n            }\n        }\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnDestroy = function () {\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onConfirm = function (event) {\n        this.confirm.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onCancel = function (event) {\n        this.cancel.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.togglePopover = function () {\n        if (!this.popover) {\n            this.showPopover();\n        }\n        else {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onDocumentClick = function (event) {\n        if (this.popover &&\n            !this.elm.nativeElement.contains(event.target) &&\n            !this.popover.location.nativeElement.contains(event.target)) {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.showPopover = function () {\n        var _this = this;\n        if (!this.popover && !this.isDisabled) {\n            // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n            // otherwise the document click event gets fired after the click event\n            // that triggered the popover to open (no idea why this is so)\n            setTimeout(function () {\n                _this.eventListeners = [\n                    _this.renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('window', 'resize', function () { return _this.positionPopover(); })\n                ];\n            });\n            var /** @type {?} */ options_1 = new ConfirmationPopoverWindowOptions();\n            Object.assign(options_1, this.defaultOptions, {\n                popoverTitle: this.popoverTitle,\n                popoverMessage: this.popoverMessage,\n                onConfirm: function (event) {\n                    _this.onConfirm(event);\n                },\n                onCancel: function (event) {\n                    _this.onCancel(event);\n                },\n                onAfterViewInit: function () {\n                    _this.positionPopover();\n                }\n            });\n            var /** @type {?} */ optionalParams = [\n                'confirmText',\n                'cancelText',\n                'placement',\n                'confirmButtonType',\n                'cancelButtonType',\n                'focusButton',\n                'hideConfirmButton',\n                'hideCancelButton',\n                'popoverClass',\n                'appendToBody',\n                'customTemplate',\n                'reverseButtonOrder'\n            ];\n            optionalParams.forEach(function (param) {\n                if (typeof _this[param] !== 'undefined') {\n                    ((options_1))[param] = _this[param];\n                }\n            });\n            var /** @type {?} */ componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n            var /** @type {?} */ childInjector = Injector.create([\n                {\n                    provide: ConfirmationPopoverWindowOptions,\n                    useValue: options_1\n                }\n            ], this.viewContainerRef.parentInjector);\n            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n            if (options_1.appendToBody) {\n                document.body.appendChild(this.popover.location.nativeElement);\n            }\n            this.isOpenChange.emit(true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.positionPopover = function () {\n        if (this.popover) {\n            var /** @type {?} */ popoverElement = this.popover.location.nativeElement.children[0];\n            var /** @type {?} */ popoverPosition = this.position.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);\n            this.renderer.setStyle(popoverElement, 'top', popoverPosition.top + \"px\");\n            this.renderer.setStyle(popoverElement, 'left', popoverPosition.left + \"px\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.hidePopover = function () {\n        if (this.popover) {\n            this.popover.destroy();\n            delete this.popover;\n            this.isOpenChange.emit(false);\n            this.eventListeners.forEach(function (fn) { return fn(); });\n            this.eventListeners = [];\n        }\n    };\n    return ConfirmationPopoverDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\nvar FocusDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elm\n     */\n    function FocusDirective(elm) {\n        this.elm = elm;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FocusDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"mwlFocus\"] && this.mwlFocus === true) {\n            this.elm.nativeElement.focus();\n        }\n    };\n    return FocusDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar USER_OPTIONS = new InjectionToken('confirmation popover user options');\n/**\n * @param {?} userOptions\n * @return {?}\n */\nfunction optionsFactory(userOptions) {\n    var /** @type {?} */ options = new ConfirmationPopoverOptions();\n    Object.assign(options, userOptions);\n    return options;\n}\nvar ConfirmationPopoverModule = /*@__PURE__*/ (function () {\n    function ConfirmationPopoverModule() {\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    ConfirmationPopoverModule.forRoot = function (options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return {\n            ngModule: ConfirmationPopoverModule,\n            providers: [\n                {\n                    provide: USER_OPTIONS,\n                    useValue: options\n                },\n                {\n                    provide: ConfirmationPopoverOptions,\n                    useFactory: optionsFactory,\n                    deps: [USER_OPTIONS]\n                },\n                Positioning\n            ]\n        };\n    };\n    return ConfirmationPopoverModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { ConfirmationPopoverModule, ConfirmationPopoverOptions as ɵd, ConfirmationPopoverWindowOptions as ɵf, ConfirmationPopoverWindowComponent as ɵe, ConfirmationPopoverDirective as ɵc, USER_OPTIONS as ɵa, optionsFactory as ɵb, FocusDirective as ɵg };\n//# sourceMappingURL=angular-confirmation-popover.js.map\n",null]}